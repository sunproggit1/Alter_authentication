$(document).ready(function () {        
    // –§–æ—Ä–º–∞–Ω—ã –∂—ñ–±–µ—Ä—É–¥—ñ –±–∞—Ç—ã—Ä–º–∞ –±–∞—Å—ã–ª“ì–∞–Ω–¥–∞ –±–æ–ª–¥—ã—Ä–º–∞—É
    $('#setDestinationBtn, #setObstaclesBtn, #resetGameBtn, #setCharacterBtn').on('click', function (e) {
        e.preventDefault(); // –§–æ—Ä–º–∞–Ω—ã –∂—ñ–±–µ—Ä—É–¥—ñ“£ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—Ç—ã ”ô—Ä–µ–∫–µ—Ç—ñ–Ω ”©—à—ñ—Ä—É
    });

    // –ú–∏–Ω–∏-–æ–π—ã–Ω —Ä–µ–∂–∏–º–¥–µ—Ä—ñ–Ω “õ–æ—Å—É/”©—à—ñ—Ä—É
    let settingDestination = false;
    let settingObstacles = false;
    let settingCharacter = false;
    let activeMode = false; // –†–µ–∂–∏–º, –æ–Ω–¥–∞ —Ç—ã—à“õ–∞–Ω–¥—ã –±–∞—Å—É ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Ä—ñ –æ—Ä—ã–Ω–¥–∞–ª–º–∞–π–¥—ã
    let characterX = 0;
    let characterY = 0;
    let destinationSet = false;
    let characterFixed = false;

    let selectedPath = [{ x: characterX, y: characterY }]; // –¢–∞“£–¥–∞–ª“ì–∞–Ω “±—è—à—ã“õ—Ç–∞—Ä–¥—ã“£ —Ç—ñ–∑–±–µ–≥—ñ
    let obstacles = []; // –ö–µ–¥–µ—Ä–≥—ñ–ª–µ—Ä —Ç—ñ–∑—ñ–º—ñ
    let destination = null; // –ú–∞“õ—Å–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—Ç–∞—Ä—ã

    // –†–µ–∂–∏–º–¥–µ—Ä–¥—ñ –∞—É—ã—Å—Ç—ã—Ä—É
    $('#setDestinationBtn').on('click', function () {
        settingDestination = true;
        settingObstacles = false;
        settingCharacter = false;
        activeMode = false;
        console.log('–†–µ–∂–∏–º: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏');
    });

    $('#setObstaclesBtn').on('click', function () {
        settingDestination = false;
        settingObstacles = true;
        settingCharacter = false;
        activeMode = false;
        console.log('–†–µ–∂–∏–º: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π');
    });

    $('#setCharacterBtn').on('click', function () {
        settingDestination = false;
        settingObstacles = false;
        settingCharacter = true;
        activeMode = false;
        console.log('–†–µ–∂–∏–º: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
    });

    $('#disableInteractionBtn').on('click', function () {
        settingDestination = false;
        settingObstacles = false;
        settingCharacter = false;
        activeMode = true;
        console.log('–†–µ–∂–∏–º: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è');
    });

    // 8x8 —Ç–æ—Ä –∂–∞—Å–∞—É
    function createGameGrid() {
        let gridContainer = $('#miniGameGrid');
        gridContainer.empty(); // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–¥—ñ“£ –º–∞–∑–º“±–Ω—ã–Ω —Ç–∞–∑–∞—Ä—Ç—É

        for (let i = 0; i < 8; i++) {
            for (let j = 0; j < 8; j++) {
                let cell = $('<div></div>')
                    .addClass('grid-cell grass') // ”ò–¥–µ–ø–∫—ñ–¥–µ —à”©–ø “±—è—à—ã“ì—ã
                    .attr('data-x', i)
                    .attr('data-y', j);

                gridContainer.append(cell);
            }
        }

        console.log('–¢–æ—Ä —Å–æ–∑–¥–∞–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        updateDisplay(); // –ú”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç—É –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã
    }

    // –¢–æ—Ä–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞—É
    createGameGrid();
    
    // –ö–µ–π—ñ–ø–∫–µ—Ä
    let character = $('<div class="character">üßç</div>');

    // “∞—è—à—ã“õ—Ç–∞—Ä“ì–∞ –±–∞—Å—É –∞—Ä“õ—ã–ª—ã –ø–æ–∑–∏—Ü–∏—è–ª–∞—Ä–¥—ã ”©–∑–≥–µ—Ä—Ç—É –ª–æ–≥–∏–∫–∞—Å—ã
    $('#miniGameGrid').on('click', '.grid-cell', function () {
        if (activeMode || characterFixed) {
            console.log('–ù–∞–∂–∞—Ç–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ');
            return;
        }

        let x = $(this).attr('data-x');
        let y = $(this).attr('data-y');

        // –ú–∞“õ—Å–∞—Ç—Ç—ã –æ—Ä–Ω–∞—Ç—É –∫–µ–∑—ñ–Ω–¥–µ
        if (settingDestination) {
            if (destination) {
                let previousDestinationCell = $(`.grid-cell[data-x="${destination.x}"][data-y="${destination.y}"]`);
                previousDestinationCell.removeClass('flag').addClass('grass').text('');
            }
            $(this).removeClass('grass').addClass('flag').text('üö©');
            console.log(`–¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ —è—á–µ–π–∫–µ (${x}, ${y})`);
            destination = { x: x, y: y }; // –ú–∞“õ—Å–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—Ç–∞—Ä—ã–Ω –∂–∞“£–∞—Ä—Ç—É
            destinationSet = true;
        } else if (settingObstacles) {
            if (!$(this).hasClass('flag') && !$(this).hasClass('character')) {
                $(this).removeClass('grass').addClass('rock').text('ü™®');
                console.log(`–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ —è—á–µ–π–∫–µ (${x}, ${y})`);
                obstacles.push({ x: x, y: y }); // –ö–µ–¥–µ—Ä–≥—ñ —Ç—ñ–∑—ñ–º—ñ–Ω–µ “õ–æ—Å—É
            }
        } else if (settingCharacter) {
            moveCharacterTo(x, y);
            console.log(`–ü–æ–∑–∏—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ —è—á–µ–π–∫–µ (${x}, ${y})`);
        }

        updateDisplay(); // –ú”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç—É –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã
    });

    // –ö–µ–π—ñ–ø–∫–µ—Ä–¥—ñ –±–µ—Ä—ñ–ª–≥–µ–Ω –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç“õ–∞ –∞—É—ã—Å—Ç—ã—Ä—É
    function moveCharacterTo(x, y) {
        $('.grid-cell').removeClass('character'); // –ê–ª–¥—ã“£“ì—ã –ø–æ–∑–∏—Ü–∏—è–Ω—ã —Ç–∞–∑–∞–ª–∞—É
        let targetCell = $(`.grid-cell[data-x="${x}"][data-y="${y}"]`);
        targetCell.append(character);
        characterX = parseInt(x);
        characterY = parseInt(y);

        // “ö–æ–∑“ì–∞–ª—ã—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—Ç–∞—Ä—ã–Ω —Ç—ñ–∑–±–µ–∫–∫–µ “õ–æ—Å—É
        selectedPath.push({ x: characterX, y: characterY });
        updateDisplay(); // –ú”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç—É –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã
    }

    
    $('#moveUp').on('click', function () {
        
        let newX = characterX -1;
        let newY = characterY;
    
        // –¢–æ—Ä —à–µ–≥—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É
        if (newX >= 0 && newX < 8 && newY >= 0 && newY < 8) {
            let targetCell = $(`.grid-cell[data-x="${newX}"][data-y="${newY}"]`);
            if (targetCell.hasClass('rock')) {
                console.log('–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ: –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ');
                return;
            }

            moveCharacterTo(newX, newY);
            console.log(`–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —è—á–µ–π–∫—É (${newX}, ${newY})`);

            if (destinationSet && newX == destination.x && newY == destination.y) {
                console.log('–ü–µ—Ä—Å–æ–Ω–∞–∂ –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏. –î–∞–ª—å–Ω–µ–π—à–µ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.');
                characterFixed = true;
                $('#saveSettingsBtn').show(); // –¢“Ø–π–º–µ–Ω—ñ –∫”©—Ä—Å–µ—Ç—É
            }
        } else {
            console.log('–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ: –≤—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–µ—Ç–∫–∏');
        }

    });


    $('#moveDown').on('click', function () {
        
        let newX = characterX + 1;
        let newY = characterY;
    
        // –¢–æ—Ä —à–µ–≥—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É
        if (newX >= 0 && newX < 8 && newY >= 0 && newY < 8) {
            let targetCell = $(`.grid-cell[data-x="${newX}"][data-y="${newY}"]`);
            if (targetCell.hasClass('rock')) {
                console.log('–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ: –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ');
                return;
            }

            moveCharacterTo(newX, newY);
            console.log(`–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —è—á–µ–π–∫—É (${newX}, ${newY})`);

            if (destinationSet && newX == destination.x && newY == destination.y) {
                console.log('–ü–µ—Ä—Å–æ–Ω–∞–∂ –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏. –î–∞–ª—å–Ω–µ–π—à–µ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.');
                characterFixed = true;
                $('#saveSettingsBtn').show(); // –¢“Ø–π–º–µ–Ω—ñ –∫”©—Ä—Å–µ—Ç—É
            }
        } else {
            console.log('–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ: –≤—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–µ—Ç–∫–∏');
        }

    });


    $('#moveLeft').on('click', function () {
        
        let newX = characterX;
        let newY = characterY - 1;
    
        // –¢–æ—Ä —à–µ–≥—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É
        if (newX >= 0 && newX < 8 && newY >= 0 && newY < 8) {
            let targetCell = $(`.grid-cell[data-x="${newX}"][data-y="${newY}"]`);
            if (targetCell.hasClass('rock')) {
                console.log('–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ: –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ');
                return;
            }

            moveCharacterTo(newX, newY);
            console.log(`–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —è—á–µ–π–∫—É (${newX}, ${newY})`);

            if (destinationSet && newX == destination.x && newY == destination.y) {
                console.log('–ü–µ—Ä—Å–æ–Ω–∞–∂ –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏. –î–∞–ª—å–Ω–µ–π—à–µ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.');
                characterFixed = true;
                $('#saveSettingsBtn').show(); // –¢“Ø–π–º–µ–Ω—ñ –∫”©—Ä—Å–µ—Ç—É
            }
        } else {
            console.log('–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ: –≤—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–µ—Ç–∫–∏');
        }

    });


    $('#moveRight').on('click', function () {
        
        let newX = characterX;
        let newY = characterY + 1;
    
        // –¢–æ—Ä —à–µ–≥—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É
        if (newX >= 0 && newX < 8 && newY >= 0 && newY < 8) {
            let targetCell = $(`.grid-cell[data-x="${newX}"][data-y="${newY}"]`);
            if (targetCell.hasClass('rock')) {
                console.log('–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ: –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ');
                return;
            }

            moveCharacterTo(newX, newY);
            console.log(`–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —è—á–µ–π–∫—É (${newX}, ${newY})`);

            if (destinationSet && newX == destination.x && newY == destination.y) {
                console.log('–ü–µ—Ä—Å–æ–Ω–∞–∂ –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏. –î–∞–ª—å–Ω–µ–π—à–µ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.');
                characterFixed = true;
                $('#saveSettingsBtn').show(); // –¢“Ø–π–º–µ–Ω—ñ –∫”©—Ä—Å–µ—Ç—É
            }
        } else {
            console.log('–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ: –≤—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–µ—Ç–∫–∏');
        }

    });

    


    // –ö–µ–π—ñ–ø–∫–µ—Ä–¥—ñ –ø–µ—Ä–Ω–µ–ª–µ—Ä –∞—Ä“õ—ã–ª—ã –∂—ã–ª–∂—ã—Ç—É
    $(document).keydown(function (e) {
        if (activeMode || characterFixed) {
            console.log('–ù–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à –æ—Ç–∫–ª—é—á–µ–Ω—ã');
            return;
        }

        let newX = characterX;
        let newY = characterY;

        switch (e.key) {
            case 'ArrowUp': newX--; break;
            case 'ArrowDown': newX++; break;
            case 'ArrowLeft': newY--; break;
            case 'ArrowRight': newY++; break;
            default: return; // –ë–∞—Å“õ–∞ –ø–µ—Ä–Ω–µ–ª–µ—Ä–¥—ñ –µ–ª–µ–º–µ—É
        }

        // –¢–æ—Ä —à–µ–≥—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É
        if (newX >= 0 && newX < 8 && newY >= 0 && newY < 8) {
            let targetCell = $(`.grid-cell[data-x="${newX}"][data-y="${newY}"]`);
            if (targetCell.hasClass('rock')) {
                console.log('–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ: –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ');
                return;
            }

            moveCharacterTo(newX, newY);
            console.log(`–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —è—á–µ–π–∫—É (${newX}, ${newY})`);

            if (destinationSet && newX == destination.x && newY == destination.y) {
                console.log('–ü–µ—Ä—Å–æ–Ω–∞–∂ –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏. –î–∞–ª—å–Ω–µ–π—à–µ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.');
                characterFixed = true;
                $('#saveSettingsBtn').show(); // –¢“Ø–π–º–µ–Ω—ñ –∫”©—Ä—Å–µ—Ç—É
            }
        } else {
            console.log('–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ: –≤—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–µ—Ç–∫–∏');
        }
    });

    // –¢–æ—Ä–¥—ã “õ–∞–π—Ç–∞ –æ—Ä–Ω–∞—Ç—É
    $('#resetGameBtn').on('click', function () {
        $('#saveSettingsBtn').hide(); // –°–∞“õ—Ç–∞—É —Ç“Ø–π–º–µ—Å—ñ–Ω –∂–∞—Å—ã—Ä—É
        createGameGrid(); // –¢–æ—Ä–¥—ã “õ–∞–π—Ç–∞ –∂–∞—Å–∞—É
        selectedPath = []; // –¢—ñ–∑–±–µ–∫—Ç—ñ —Ç–∞–∑–∞–ª–∞—É
        obstacles = []; // –ö–µ–¥–µ—Ä–≥—ñ–ª–µ—Ä–¥—ñ —Ç–∞–∑–∞–ª–∞—É
        destination = null; // –ú–∞“õ—Å–∞—Ç—Ç—ã —Ç–∞–∑–∞–ª–∞—É
        characterX = 0; // –ö–µ–π—ñ–ø–∫–µ—Ä –ø–æ–∑–∏—Ü–∏—è—Å—ã–Ω “õ–∞–π—Ç–∞ –æ—Ä–Ω–∞—Ç—É
        characterY = 0;
        destinationSet = false;
        characterFixed = false;
        moveCharacterTo(characterX, characterY); // –ö–µ–π—ñ–ø–∫–µ—Ä–¥—ñ –±–∞—Å—Ç–∞–ø“õ—ã –ø–æ–∑–∏—Ü–∏—è“ì–∞ “õ–∞–π—Ç–∞—Ä—É
        console.log('–°–µ—Ç–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ü–æ–∑–∏—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–π.');
        updateDisplay(); // –ú”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç—É –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã
    });

    // “∞—è—à—ã“õ—Ç—ã ”ô–¥–µ–ø–∫—ñ –∫“Ø–π–≥–µ “õ–∞–π—Ç–∞—Ä—É
    function resetCellToDefault(cell) {
        cell.removeClass('flag rock character').addClass('grass').text('');
    }

    // –ú”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç—É –∂”ô–Ω–µ –∂–∞“£–∞—Ä—Ç—É
    function updateDisplay() {
        let pathDisplay = selectedPath.map(coord => `[${coord.x},${coord.y}]`).join(', ');
        let obstaclesDisplay = obstacles.map(coord => `[${coord.x},${coord.y}]`).join(', ');
        let destinationDisplay = destination ? `[${destination.x},${destination.y}]` : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
    
        $('#pathDisplay').text(`–¶–µ–ø–æ—á–∫–∞: ${pathDisplay}`);
        $('#obstaclesDisplay').text(`–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è: ${obstaclesDisplay}`);
        $('#destinationDisplay').text(`–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${destinationDisplay}`);
    
        // –ö–æ–Ω—Å–æ–ª—å–¥–µ —Ç–µ–∫—Å–µ—Ä—É
        console.log('–¶–µ–ø–æ—á–∫–∞:', selectedPath);
        console.log('–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è:', obstacles);
        console.log('–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', destination);
    }

    // –ú”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä–¥—ñ AJAX –∞—Ä“õ—ã–ª—ã –∂—ñ–±–µ—Ä—É
    function submitTestSettings() {
        let settingsData = {
            test_type: $('#test_type').val(), // –ê“ì—ã–º–¥–∞“ì—ã —Ä–µ–∂–∏–º
            value_chain: selectedPath, // –ñ–æ–ª —Ç—ñ–∑–±–µ–≥—ñ
            obstaclesList: obstacles, // –ö–µ–¥–µ—Ä–≥—ñ–ª–µ—Ä —Ç—ñ–∑—ñ–º—ñ
        };

        let settingsJson = JSON.stringify(settingsData);

        refreshCSRFToken();
        let new_csrf_token = getCookie('csrftoken');
        $.ajax({
            url: $('#testForm').attr('action'), // URL —Ñ–æ—Ä–º–∞–Ω—ã“£ action –∞—Ç—Ä–∏–±—É—Ç—ã–Ω–∞–Ω –∞–ª—ã–Ω–∞–¥—ã
            type: 'POST',
            data: {
                purpose: 'second_factor',
                settings_data: settingsJson,
                second_factor_method: 'Test',
                csrfmiddlewaretoken: new_csrf_token,
            },
            success: function(response) {
                if (response.status === 'success') {
                    alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
                    console.log(response.message);
                    form.find('.error-message').hide();
                    form.find('.success-message').text(response.message).show();
                    setTimeout(() => {
                        window.location.reload(); // –°–∞“õ—Ç–∞–ª“ì–∞–Ω–Ω–∞–Ω –∫–µ–π—ñ–Ω –±–µ—Ç—Ç—ñ “õ–∞–π—Ç–∞ –∂“Ø–∫—Ç–µ—É
                    }, 1000);
                }
            },
            error: function(xhr) {
                const errorResponse = JSON.parse(xhr.responseText);
                form.find('.success-message').hide();
                form.find('.error-message').text(errorResponse.message).show();
                console.log(errorResponse.message);
            }
        });
    }

    // –°–∞“õ—Ç–∞—É —Ç“Ø–π–º–µ—Å—ñ “Ø—à—ñ–Ω ”©“£–¥–µ—É—ñ—à
    $('#saveSettingsBtn').on('click', function () {
        submitTestSettings();
    });
});
